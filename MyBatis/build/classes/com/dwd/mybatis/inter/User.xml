<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dwd.mybatis.inter.IUserOperation">
  <select id="selectUserByID" parameterType="int" resultType="User">
    select * from user where id = #{id}
  </select>
 
<!-- 查询所有用户 -->
<!-- 为了返回list 类型而定义的returnMap -->
    <resultMap type="User" id="resultListUser">
        <id column="id" property="id" />
        <result column="userName" property="userName" />
        <result column="userAge" property="userAge" />
        <result column="userAddress" property="userAddress" />
    </resultMap>
    <!-- resultMap填写对应的resultMap的id -->
    <select id="selectAllUser" resultMap="resultListUser">
    	select * from user
    </select>
    
<!-- 增加用户 -->
<!--执行增加操作的SQL语句。id和parameterType  分别与IUserOperation接口中的addUser方法的名字和  参数类型一致。以#{name}的形式引用Student参数  
的name属性，MyBatis将使用反射读取Student参数   的此属性。#{name}中name大小写敏感。引用其他  的gender等属性与此一致。seGeneratedKeys设置  
为"true"表明要MyBatis获取由数据库自动生成的主  键；keyProperty="id"指定把获取到的主键值注入到Student的id属性--> 
	<insert id="insertUser" parameterType="User" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO user(userName,userAge,userAddress) VALUES(#{userName},#{userAge},#{userAddress})
	</insert>
	
<!-- 更新用户 -->
	<update id="updateUser">
		UPDATE user SET userName=#{userName},userAge=#{userAge},userAddress=#{userAddress} WHERE id=#{id}
	</update> 
	
<!-- 删除用户 -->
	<delete id="deleteUser" parameterType="int">
        delete from user where id=#{id}
    </delete>  
</mapper>